Testing function ```matrix_divided```
_______________________________________________

This function takes every number of the matrix
and divide it by div parameter number
-----------------------------------------------

Import the function:
       >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Testing empty matrix:
	>>> matrix = [[]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing is matrix is a Single List:
	>>> matrix = []
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix = [1, 2, 3]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing if matrix is a Tuple:
	>>> matrix = ((1,2,3), (4, 5, 6))
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix = (4, 5, 6)
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing if matrix is a Set:
	>>> matrix = {4, 5, 6}
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing if an element is not a float or int:
	>>> matrix = [[1, "school", 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing regular division:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, -3)
	[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

Testing if parameter div is not a number:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, False)
	Traceback (most recent call last):
	...
	TypeError: div must be a number
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, None)
	Traceback (most recent call last):
	...
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, "two")
	Traceback (most recent call last):
	...
	TypeError: div must be a numbeTypeError: div must be a number

Testing if parameter div is Zero:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

Testing if parameter div is not int or float:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, "termi")
	Traceback (most recent call last):
	...
	TypeError: div must be a number

Testing when matrix elements or parameter div are floats:
	 >>> matrix = [[1, 2.3, 3], [4, 5, 6.8]]
	 >>> matrix_divided(matrix, 3)
	 [[0.33, 0.77, 1.0], [1.33, 1.67, 2.27]]
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> matrix_divided(matrix, 3.6)
	 [[0.28, 0.56, 0.83], [1.11, 1.39, 1.67]]

Testing if numbers are complex:
	>>> matrix = [[1, 1 + 4j, 3], [4, 5.6, 6]]
	>>> matrix_divided(matrix, 4)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing long numbers:
	>>> matrix_divided([[1, 100e+1000, 3], [4, 5.6, 6]], 100e+1000)
	[[0.0, nan, 0.0], [0.0, 0.0, 0.0]]
	>>> matrix_divided([[1, 2, 3], [4, 5.6, 6]], 100e+1000)
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
	>>> matrix_divided([[1, -100e+1000, 3], [4, 5.6, 6]], 2)
	[[0.5, -inf, 1.5], [2.0, 2.8, 3.0]]
	>>> matrix_divided([[1, 2, 3], [-4, 5.6, 6]], -100e+1000)
	[[-0.0, -0.0, -0.0], [0.0, -0.0, -0.0]]

Testing if just one argument passed:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]])
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

Testing is passed more than two parameters:
	>>> matrix_divided([[22, 3, 2003], [23, 9, 2002]], 6, 1)
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() takes 2 positional arguments but 3 were given

Testing every row is the same length:
	>>> matrix_divided([[1, 2, 3], [4, 5]], 3)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size
