Testing function ```add_integer```
________________________________

This function adds two integers
--------------------------------

Import the function:
       >>> add_integer = __import__('0-add_integer').add_integer

Testing two positive numbers:
	>>> add_integer(5, 10)
	15

Testing negative number:
	>>> add_integer(7, -2)
	5
	>>> add_integer(-14, -5)
	-19

Testing Float number:
	>>> add_integer(2, 3.6)
	5
	>>> add_integer(3.0, -1.5)
	2


Testing Not a number:
	>>> add_integer(9, "one")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer
 	>>> add_integer([1, 2, 3], { 'This works': False })
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
 	>>> add_integer(5, True)
	Traceback (most recent call last):
	...
	TypeError: b must be an integer


Testing None:
	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Testing Long number:
	>>> add_integer(9999999999999999, 1)
	10000000000000000

Testing No arguments:
	>>> add_integer()
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument: 'a'

Testing One argument:
	>>> add_integer(-88)
	10

Testing more than two arguments:
	>>> add_integer(23, 9, 3)
	Traceback (most recent call last):
	...
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
